[tox]
minversion = 1.6
envlist = py34,py27,pep8
skipsdist = True

[testenv]
usedevelop = True
install_command =
  # networking-nec is still targetted to Mitaka development,
  # so we need to use upper-constraints.txt from stable/mitaka branch.
  {toxinidir}/tools/tox_install.sh {env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt?h=stable/mitaka} {opts} {packages}
# Note the hash seed is set to 0 until neutron can be tested with a
# random hash seed successfully.
setenv =
  VIRTUAL_ENV={envdir}
deps = -r{toxinidir}/test-requirements.txt
whitelist_externals = sh
commands =
  sh tools/pretty_tox.sh '{posargs}'
# there is also secret magic in pretty_tox.sh which lets you run in a fail only
# mode. To do this define the TRACE_FAILONLY environmental variable.

[testenv:pep8]
deps =
  {[testenv]deps}
commands =
  flake8
  sh ./tools/coding-checks.sh --pylint '{posargs}'
  neutron-db-manage --subproject networking-nec --database-connection sqlite:// check_migration

[testenv:venv]
commands = {posargs}

[testenv:cover]
commands = python setup.py test --coverage --coverage-package-name=networking_nec --testr-args='{posargs}'

[testenv:docs]
commands = sphinx-build -W -b html doc/source doc/build/html

[testenv:debug]
commands = oslo_debug_helper {posargs}

[flake8]
exclude=.venv,.git,.tox,dist,*lib/python*,*egg,build

[hacking]
import_exceptions = networking_nec._i18n
local-check-factory = neutron.hacking.checks.factory
